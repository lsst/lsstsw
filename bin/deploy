#!/bin/bash
#
#  Deploy a standardized, standalone, lsst-build sandbox
#

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
# shellcheck source=./etc/settings.cfg.sh
source "${SCRIPT_DIR}/../etc/settings.cfg.sh"
# load common functions
# shellcheck source=./bin/utils.sh
source "${SCRIPT_DIR}/../bin/utils.sh"

LSST_EUPS_VERSION=${LSST_EUPS_VERSION:-2.1.5}
LSST_EUPS_GITREV=${LSST_EUPS_GITREV:-""}
LSST_EUPS_GITREPO=${LSST_EUPS_GITREPO:-https://github.com/RobertLuptonTheGood/eups.git}
# This string is used to maintain compatibility with eups.lsst.codes URLs
# but it is not actually used to select the miniconda version.
LSST_MINICONDA_VERSION="py38_4.9.2"
LSST_MINICONDA_BASE_URL=${LSST_MINICONDA_BASE_URL:-https://github.com/conda-forge/miniforge/releases/latest/download}
LSST_GIT_VERSION=${LSST_GIT_VERSION:-2.18.0}
LSST_LFS_VERSION=${LSST_LFS_VERSION:-2.4.2}
LSST_BUILD_GITREV=${LSST_BUILD_GITREV:-main}
LSST_BUILD_GITREPO=${LSST_BUILD_GITREPO:-https://github.com/lsst/lsst_build.git}
LSST_SCIPIPECENV_GITREPO=${LSST_SCIPIPECENV_GITREPO:-https://github.com/lsst/scipipe_conda_env.git}

set -e


usage() {
  if [[ -n "$1" ]]; then
    print_error "$0: $1"
  fi

  # note that heredocs are prefixed with tab chars
  fail "$(cat <<-EOF

		Usage: $0 [-h] [-r REF|-v VERSION|-x TAG]

		Specific options:
	    -v VERSION  a specific version of rubin-env conda package.
	                By default will use the version specified in etc/settings.cfg.sh
	    -r REF      git reference (SHA1) in scipipe_conda_env repository (backward compatibility)
	    -x TAG      eups tag to select the exact environment for that tag
	    -h          show this message

		EOF
  )"
}


parse_args() {
  local OPTIND
  local opt

  # We are intentionally not using gnu `getopt` due to portability concerns.
  # Sadly, this means no long options without a massive amount of boilerplate.
  while getopts "hr:v:x:" opt; do
    case "$opt" in
    h)
      usage
      ;;
    v)
      [[ -n $TAG ]] && usage "Cannot specify both -v and -x"
      [[ -n $ENVREF ]] && usage "Cannot specify both -v and -r"
      ENV_VERSION=${OPTARG}
      ;;
    x)
      [[ -n $ENV_VERSION ]] && usage "Cannot specify both -x and -v"
      [[ -n $ENVREF ]] && usage "Cannot specify both -x and -r"
      TAG=${OPTARG}
      ;;
    r)
      [[ -n $TAG ]] && usage "Cannot specify both -r and -x"
      [[ -n $ENV_VERSION ]] && usage "Cannot specify both -r and -v"
      ENVREF=${OPTARG}
      ;;
    *)
      usage "Unknown option: ${opt}"
      ;;
    esac
  done
  shift $((OPTIND-1))
}


#
# test to see if script is being sourced or executed. Note that this function
# will work correctly when the source is being piped to a shell. `Ie., cat
# newinstall.sh | bash -s`
#
# See: https://stackoverflow.com/a/12396228
#
am_I_sourced() {
  if [ "${FUNCNAME[1]}" = source ]; then
    return 0
  else
    return 1
  fi
}

get_tagged_env() {
  eups_root=https://eups.lsst.codes/stack
  env_version=$($CURL "${CURL_OPTS[@]}" -L "$eups_root/src/tags/$1.list" \
    | grep '^#CONDA_ENV=' | cut -d= -f2) \
    || fail "Unable to determine conda env"
  platform="$(uname -s)"
  arch="$(uname -p)"
  if [[ "$platform" = "Linux" ]]; then
    if [[ "$arch" = "x86_64" ]]; then
      eups_platform="redhat/el7/conda-system/miniconda3-${LSST_MINICONDA_VERSION}-$env_version"
    elif [[ "$arch" = "aarch64" ]]; then
      eups_platform="redhat/el8-arm/conda-system/miniconda3-${LSST_MINICONDA_VERSION}-$env_version"
    fi

  elif [[ "$platform" = "Darwin" ]]; then
    if [[ "$arch" = "x86_64" ]]; then
      eups_platform="osx/10.9/conda-system/miniconda3-${LSST_MINICONDA_VERSION}-$env_version"
    elif [[ "$arch" = "arm64" ]]; then
      eups_platform="osx/14-arm/conda-system/miniconda3-${LSST_MINICONDA_VERSION}-$env_version"
    fi
  else
    fail "Unknown platform or arch: $platform $arch"
  fi

  $CURL "${CURL_OPTS[@]}" -O "$eups_root/$eups_platform/env/$1.env" \
    || fail "Unable to download environment spec for tag $1"
}

main() {
  config_curl

  ENV_VERSION=""
  ENVREF=""

  parse_args "$@"

  RUBIN_ENV_CONDA_CHANNELS="nodefaults conda-forge"

  if [[ -n $ENV_VERSION ]]; then
    RUBIN_ENV_VERSION=$ENV_VERSION
  elif [[ -n $ENVREF ]]; then
    RUBIN_ENV_VERSION=$ENVREF
  elif [[ -n $TAG ]]; then
    RUBIN_ENV_VERSION=$TAG
    get_tagged_env "$TAG"
  else
    RUBIN_ENV_VERSION=$LSST_SPLENV_REF
  fi

  if [[ $RUBIN_ENV_VERSION == *dev ]]; then
    RUBIN_ENV_CONDA_CHANNELS="nodefaults conda-forge/label/rubin-env_dev conda-forge"
  fi
  LSST_CONDA_CHANNELS=${LSST_CONDA_CHANNELS:-"${RUBIN_ENV_CONDA_CHANNELS}"}

  export LSST_CONDA_ENV_NAME=${LSST_CONDA_ENV_NAME:-"${SPLENV_BASE_NAME}-${RUBIN_ENV_VERSION}"}

  mkdir -p "${LSSTSW}"/{sources,build,var/run,var/log,lfs,distserver/production,etc,env}

  export PATH="${LSSTSW}/lfs/bin:${PATH}"
  export PATH="${LSSTSW}/bin:${PATH}"

  # check which platform we are running on
  discover_platform

  cd "$LSSTSW"

  fetch_repos.yaml 'main'

  # install miniconda
  miniconda_lock="${miniconda_path}/.deployed"
  test -f "$miniconda_lock" || (
    miniconda_file_name="Miniforge3-${ana_platform}.sh"

    echo "::: Deploying ${miniconda_file_name}"

    cd sources
    $CURL "${CURL_OPTS[@]}" -# -L \
      -O "${LSST_MINICONDA_BASE_URL}/${miniconda_file_name}"

    rm -rf "$miniconda_path"
    bash "$miniconda_file_name" -b -p "$miniconda_path"

    touch "$miniconda_lock"
  )

  # shellcheck disable=SC1091
  . "${miniconda_path}/etc/profile.d/conda.sh"
  conda activate base

  # cleanup orphaned lock file
  local old_miniconda_pkgs_lock="${LSSTSW}/miniconda/.packages.deployed"
  [[ -e $old_miniconda_pkgs_lock ]] && rm "$old_miniconda_pkgs_lock"

  if conda env list | grep "^$LSST_CONDA_ENV_NAME " > /dev/null; then
    echo "::: Environment $LSST_CONDA_ENV_NAME already deployed."
  else
    if [[ -n $ENVREF ]]; then
      deploy_scipipe_env
    else
      echo "::: Deploy new environment $LSST_CONDA_ENV_NAME"
      # Install packages on which the stack is known to depend
      # conda may leave behind lock files from an uncompleted package
      # installation attempt.  These need to be cleaned up before [re]attempting
      # to install packages.
      conda clean -y --all
      ARGS=()
      ARGS+=('create')
      ARGS+=('-y')
      # disable the conda install progress bar when not attached to a tty. Eg.,
      # when running under CI
      if [[ ! -t 1 ]]; then
        ARGS+=("--quiet")
      fi
      ARGS+=('--name' "$LSST_CONDA_ENV_NAME")
      for c in $LSST_CONDA_CHANNELS; do
        ARGS+=("-c" "$c")
      done
      ARGS+=("--strict-channel-priority")
      if [[ -n $TAG ]]; then
        ARGS+=("--file" "${TAG}.env")
      else
        ARGS+=("rubin-env=${RUBIN_ENV_VERSION}")
      fi
      echo "mamba" "${ARGS[@]}"
      mamba "${ARGS[@]}"

      echo "Cleaning conda environment..."
      conda clean -y -a > /dev/null
      echo "done"

      if [[ -n $TAG ]]; then
        rm "${TAG}.env"
      fi
    fi
  fi

  # intentionally outside of a lockfile subshell
  echo "Activating environment ${LSST_CONDA_ENV_NAME}"
  conda activate "${LSST_CONDA_ENV_NAME}"

  # Configuring proper channels at environment level
  (
    # configure alt conda channel(s)
    if [[ -n $LSST_CONDA_CHANNELS ]]; then
      # remove any previously configured non-default channels
      # XXX allowed to fail
      conda config --env --remove-key channels 2>/dev/null || true

      for c in $LSST_CONDA_CHANNELS; do
        if [[ "$c" != defaults ]]; then
          conda config --env --add channels "$c"
        fi
      done

      conda config --env --set channel_priority strict

    fi
  )

  # report packages in the current conda env
  conda env export

  # Define EUPS_PATH depending on the environment,
  # including the last 7 characters of the environment name
  export EUPS_PATH="${LSSTSW}/stack/${RUBIN_ENV_VERSION}"
  echo "EUPS_PATH set to ${EUPS_PATH}"

  # backwards compatibility if EUPS wasn't installed to a versioned directory
  test -f "${LSSTSW}/eups/.deployed" && ( # EUPS
    echo "::: Moving old EUPS to eups/legacy"
    mv "${LSSTSW}/eups" "${LSSTSW}/eups-tmp"
    mkdir -p "${LSSTSW}/eups"
    mv "${LSSTSW}/eups-tmp" "${LSSTSW}/eups/legacy"
    ln -s legacy "${LSSTSW}/eups/current"
  )
  # backwards compatibility if EUPS was installed to a versioned directory (not from conda)
  test ! -f "${LSSTSW}/eups/${LSST_EUPS_VERSION}/.deployed" || ( # EUPS
    # in case eups folder has already been moved to eups-legacy
    # and then recreated (case in Jenkins, where test job uses the
    # same filesystem as the official job)
    if [ ! -d "${LSSTSW}/eups-legacy" ]; then
      echo "::: Moving old EUPS to eups-legacy"
      mv "${LSSTSW}/eups" "${LSSTSW}/eups-legacy"
    else
      echo "Found eups-legacy, remove it before moving old eups to legacy"
    fi
  )

  # check if eups is not already available in the environment
  # if not, make it available from a separate eups-base environment
  if ! command -v eups > /dev/null; then
    echo "error: No eups found in the active environment ..."
    echo "  ... trying to use a stacked eups-base environment"
    conda deactivate
    if ! conda env list | grep "^eups-base " > /dev/null; then
      echo "::: Creating eups-base environment"
      conda create -y --name eups-base --strict-channel-priority eups -c conda-forge
    fi
    conda activate eups-base
    conda activate --stack "$LSST_CONDA_ENV_NAME"
  fi

  mkdir -p "${EUPS_PATH}"/{site,ups_db}
  echo "::: Deploying manifest.remap"
  ln -sf "${LSSTSW}/etc/manifest.remap" "${EUPS_PATH}/site/manifest.remap"

  test -f "${LSSTSW}/versiondb/.deployed" || ( # Clone the version database
    echo "::: Deploying versiondb"
    rm -rf versiondb
    git clone "$VERSIONDB_REPO" versiondb

    git config -f versiondb/.git/config user.name "LSST DATA Management"
    git config -f versiondb/.git/config user.email "dm-devel@lists.lsst.org"
    git config -f versiondb/.git/config push.default current
    touch "${LSSTSW}/versiondb/.deployed"
  )

  # Clone lsst_build
  if [[ ! -f "${LSSTSW}/lsst_build/.deployed" ]]; then
    (
      echo "::: Deploying lsst_build"
      rm -rf lsst_build
      git clone "$LSST_BUILD_GITREPO" -b "$LSST_BUILD_GITREV" lsst_build
      (cd lsst_build && git config push.default current)
      touch "${LSSTSW}/lsst_build/.deployed"
    )
  else
    (
      echo "::: Updating lsst_build"
      cd lsst_build
      git fetch -fup origin "$LSST_BUILD_GITREV"
      # attempt to determine if this is a branch name or a commit id. If it is
      # a branch name, we need to reset to the commit id in the origin repo.
      # Otherwise, if the branch already exists in the clone, the local HEAD
      # will be used.
      if ! commit=$(
        git rev-parse \
          --verify \
          --quiet \
          "origin/${LSST_BUILD_GITREV}"
        ); then
        commit=$LSST_BUILD_GITREV
      fi
      git reset --hard "$commit"
    )
  fi

  echo ""
  echo "::: Deploy completed."
  echo "::: To activate the just deployed environment use the following command:"
  echo

  if [[ -z "$ENV_VERSION" ]] && [[ -z "$ENVREF" ]] && [[ -z "$TAG" ]]; then
    if [[ $SHELL =~ bash$ ]]; then
      echo "    . ${LSSTSW}/bin/envconfig"
    elif [[ $SHELL =~ zsh$ ]]; then
      echo "    . ${LSSTSW}/bin/envconfig"
    else
      echo "    The setup script in ${LSSTSW}/bin most appropriate for ${SHELL}"
      echo "    (Warning: ${SHELL} is an unsupported shell)"
    fi
  else
    echo "    . ${LSSTSW}/bin/envconfig -n ${LSST_CONDA_ENV_NAME}"
    echo ""
    echo "::: or choose the environment to activate using:"
    echo "    . ${LSSTSW}/bin/envconfig -i"
  fi

}

#
# support being sourced as a lib or executed
#
if ! am_I_sourced; then
  main "$@"
fi

# vim: tabstop=2 shiftwidth=2 expandtab
