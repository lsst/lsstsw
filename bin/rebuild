#!/bin/bash
#
# ********** DONT RUN THIS UNLESS YOU UNDERSTAND WHAT IT DOES ********
# **********             SERIOUS DAMAGE MAY OCCUR             ********
#
# Recursively build all product, starting with top-level ones listed in
# $PRODUCTS.
#
# The versiondb repository should be cloned from:
#
#   https://github.com/lsst/versiondb.git
#   git@github.com:lsst/versiondb.git
#
# For creation, use:
#
#     (mkdir versiondb; cd versiondb; git init; mkdir dep_db ver_db manifests)
#

set -e

timer_start=$(date +%s)
DIR=$(cd "$(dirname "$0")"; pwd)
# shellcheck source=./etc/settings.cfg.sh
. "${DIR}/../etc/settings.cfg.sh"
# shellcheck source=./bin/utils.sh
. "${DIR}/utils.sh"


usage() {
  if [[ -n "$1" ]]; then
    print_error "$0: $1"
  fi

  # note that heredocs are prefixed with tab chars
  fail "$(cat <<-EOF
		 Usage: $0 [-p] [-B] [-L] [-n] [-u] [-r <ref> [-r <ref2> [...]]] [-t <eupstag>] product1 [product2 [...]]

	Build one or more products.
	It requires that the environment has previously been setup using envconfig.

		 Specific options:
	    -p            prepare only (checkout and pull main for all packages and run "lsst-build prepare")
	    -n            pass "--no-fetch" parameter to lsst_build
	    -B            pass "--no-binary-fetch" parameter as false to lsst_build
      -L            download ci_lsstcam_testdata
	    -u            update repos.yaml
	    -r <ref>      git reference (branch or tags) to be built
	    -t <eupstag>  clone the finished build eups tag to the specified eupstag (e.g. "-t current")
	    -h            show this message

		EOF
  )"
}


# centos 6 shipped with bash 4.1; this is the best that can be done for
# returning a value prior to bash 4.3
versiondb_head() {
  (cd "$VERSIONDB" && git rev-parse HEAD)
}

save_build_env() {
  # Saving environment information
  # Using conda-forge/rubin-env to create the environment,
  # there is no exact reference to refer to.
  #
  # The information saved here has the following scopes:
  # - save the environment name corresponding to the buildID (locally)
  #   to allow a new build based on the same environment.
  # - persist the exact environment resolved for this build, since
  #   this is not static, but will change with time.
  #   This information is also placed in EUPS_PKGROOT by publish.

  mkdir -p "${LSSTSW_BUILD_DIR}/builds"
  filename="${LSSTSW_BUILD_DIR}/builds/${BUILD}.env"
  echo "Saving environment information in ${filename}"

  # saving information in environment name
  echo "#environment_name: ${LSST_CONDA_ENV_NAME}" > "${filename}"

  # generating pinned list of environment content
  conda list --explicit >> "${filename}"
}

PREP_ONLY=false
NO_FETCH=false
NO_BINARY_FETCH=false
UPDATE=false
LSSTCAM_ONLY=false
refs=()

while getopts ":pBLnur:t:" o; do
  case "$o" in
  p)
    PREP_ONLY=true
    ;;
  n)
    NO_FETCH=true
    ;;
  B)
    NO_BINARY_FETCH=true
    ;;
  L)
    LSSTCAM_ONLY=true
    ;;
  u)
    UPDATE=true
    ;;
  r)
    refs+=("--ref" "$OPTARG")
    ;;
  t)
    TAG="$OPTARG"
    ;;
  *)
    usage "$@"
    ;;
  esac
done
shift $((OPTIND-1))

if [[ "$#" != "0" ]]; then
  PRODUCTS=("$@")
fi

# Checking if the environment is active
if [ "${CONDA_DEFAULT_ENV}" != "${LSST_CONDA_ENV_NAME}" ]; then
  echo "Environment ${LSST_CONDA_ENV_NAME} not active."
  echo "Please activate the environment using bin/envconfig before running rebuild."
  exit
fi

(
  # true if `lsst-build prepare` has run successfully
  PREPARED=false

  #
  # Add 128 to non-zero exit statuses if the `lsst-build prepare` subcommand has
  # completed.  This is to allow consumer scripts to be able to determine if a
  # failure in this script occurred before or after the prepare step.
  #
  # shellcheck disable=SC2317,SC2329  # function is reachable via trap
  cleanup() {
    local rv=$?

    [[ $rv == 0 ]] && exit
    [[ $PREPARED == true ]] && [[ $rv -lt 128 ]] && rv=$((rv + 128))

    exit "$rv"
  }

  trap cleanup EXIT

  flock-fd 200 || { echo "a rebuild is already in process." 1>&2; exit 1; }
  #
  # update repos.yaml file
  #
  if [[ $UPDATE == true ]]; then
    config_curl
    fetch_repos.yaml 'main'
  fi

  #
  # Prepare build
  #
  if [[ $VERSIONDB_PUSH == true ]]; then
    # do not pull from remote unless configured to push
    (
      cd "$VERSIONDB"
      current_branch="$(git branch --show-current)"
      if [[ $current_branch != main ]]; then
        git branch -m "$current_branch" main
	git fetch origin
	git branch -u origin/main main
	git remote set-head origin -a
	git checkout main
      fi
      git pull --quiet
    )
    VERSIONDB_HEAD_PREBUILD=$(versiondb_head)
  fi

  ARGS=()
  if [[ $NO_FETCH == true ]]; then
    ARGS+=("--no-fetch")
  fi
  ARGS+=("--repos=${REPOSFILE}")
  ARGS+=("--exclusion-map=${EXCLUSIONS}")
  ARGS+=("--version-git-repo=${VERSIONDB}")
  ARGS+=("$LSSTSW_BUILD_DIR")
  ARGS+=("${refs[@]}")
  ARGS+=("${PRODUCTS[@]}")

  lsst-build prepare "${ARGS[@]}"

  if [[ $VERSIONDB_PUSH == true ]]; then
    # do not push unless the head ref has changed
    [[ "$VERSIONDB_HEAD_PREBUILD" != $(versiondb_head) ]] &&
      (cd "$VERSIONDB" && git push && git push --tags)
  fi

  eval "$(grep -E '^BUILD=' "$LSSTSW_BUILD_DIR"/manifest.txt)"
  echo "# BUILD ID: $BUILD"

  save_build_env

  if [[ $PREP_ONLY == true ]]; then
    exit
  fi

  PREPARED=true

  #
  # HACK: Speed up the build by assuming EUPS caches are up-to-date
  # Make sure they really are first.
  #
  _EUPS_ASSUME_CACHES_UP_TO_DATE=0 python -c "import eups; eups.Eups()"
  export _EUPS_ASSUME_CACHES_UP_TO_DATE=1

  #
  # Execute build
  #
  ARGSBUILD=()
  if [[ $NO_BINARY_FETCH == true ]]; then
    ARGSBUILD=("--no-binary-fetch")
  fi
  lsst-build build "${ARGSBUILD[@]}" "$LSSTSW_BUILD_DIR"
  #
  # Tag as requested
  #
  if [[ -n $TAG ]]; then
    eups tags --clone="$BUILD" "$TAG"
  fi
  timer_end=$(date +%s)
  RUNTIME=$((timer_end-timer_start))
  echo "# BUILD $BUILD completed in $RUNTIME seconds."
) 200>"$DIR/../var/run/rebuild.run"

# vim: tabstop=2 shiftwidth=2 expandtab
