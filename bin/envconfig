#!/bin/bash

# setup lsstsw environment
#
# source this file from your ~/.bashrc or ~/.zshrc
#
# relative to <lsstsw>/bin/

print_error() {
  >&2 echo -e "$@"
}
# setup curl
run_curl() {
    _c=curl
    # Silent, show errors
    _opt="-sS"
    # Use /usr/bin/curl if available for consistency
    [ -x /usr/bin/curl ] && _c=/usr/bin/curl
    # If running interactively, output progress
    [ -t 1 ] && _opt="-#"
    # Fail on error, follow redirects, and retry on transient errors
    $_c -fL --retry 3 $_opt "$@"
}

# Copy postinstall
copy_postinstall_fix(){
  callback_folder="$EUPS_PATH/site"
  hook="distribInstallPostHook.py"
  echo "Check to see if $callback_folder/$hook exists"
  hook_url="https://raw.githubusercontent.com/RobertLuptonTheGood/eups/refs/heads/master/callbacks/$hook"
  if [ ! -f "$callback_folder/$hook" ]; then
    echo "Installing posthook"
    run_curl -o "$callback_folder/$hook" "$hook_url"
  fi
}

usage() {
  if [[ -n "$1" ]]; then
    print_error "$0: $1"
  fi

  # note that heredocs are prefixed with tab chars
  (cat <<-EOF

		Usage: $0  [-i] [-n] [-b] [-h]

		Specific options:
	-i          interactive, choose from a list of available environments
	-n NAME     activate the environment name
	-b bXXXX    activate the environment used for the build with id bXXXX
	-h          show this message

		EOF
  )

  finish=true

}

parse_args() {
  local OPTIND
  local opt

  while getopts "b:n:ih" opt; do
    case "$opt" in
    b)
      BUILD_ID=${OPTARG}
      ;;
    n)
      ENV_NAME=${OPTARG}
      ;;
    i)
      INTERACTIVE=true
      ;;
    h)
      usage
      ;;
    *)
      usage "Unknown option: ${opt}"
      ;;
    esac
  done
  shift $((OPTIND-1))
}

##############

INTERACTIVE=false
ENV_NAME=""
BUILD_ID=""
finish=false

parse_args "$@"

if [ "$finish" = true ]; then
  return
fi

if [[ -n $BASH_VERSION ]]; then
  LSSTSW=$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd) || return 1
  SUFFIX='sh'
else
  LSSTSW=$(cd "$(dirname "$0")/.."; pwd) || return 1
  # shellcheck disable=SC2034
  SUFFIX='zsh'
fi

# shellcheck source=./etc/settings.cfg.sh
source "${LSSTSW}/etc/settings.cfg.sh"

# shellcheck disable=SC1091
. "${miniconda_path}/etc/profile.d/conda.sh"

export PATH="$LSSTSW/bin:$PATH"

if $INTERACTIVE ; then
  # get the list of available environments
  envs=()
  l=0
  for env in $(conda env list | grep -v "^[# ]" | cut -d' ' -f1); do
    if [[ "$env" != '' ]] && [[ "$env" != "base" ]] ; then
      ((l++))
      envs[l]="$env"
      echo "${l} - ${envs[${l}]}"
    fi
  done
  echo "0 - EXIT (return)"
  if [ -n "$ZSH_VERSION" ]; then
    read -r "eid?Choose environment [0 to ${l}]: "
  else
    read -r -p "Choose environment [0 to ${l}]: " eid
  fi
  if  [[ "${eid}" -eq 0 ]] ; then
    return
  fi
  if [[ -z "${envs[${eid}]}" ]] ; then
    echo "User input error: ${eid} not in range."
    return
  else
    LSST_CONDA_ENV_NAME="${envs[${eid}]}"
  fi
elif [[ $ENV_NAME != "" ]]; then
  echo "Setting $ENV_NAME environment..."
  LSST_CONDA_ENV_NAME=${ENV_NAME}
elif [[ $BUILD_ID != "" ]]; then
  echo "Looking for the environment used in build ${BUILD_ID}..."
  if [[ -f "build/builds/${BUILD_ID}.env" ]]; then
    LSST_CONDA_ENV_NAME=$(grep 'environment_name' build/builds/"${BUILD_ID}".env | cut -f 2 -d ' ')
    echo "Activating environment ${LSST_CONDA_ENV_NAME}"
  else
    echo "No build found with id ${BUILD_ID}"
    return
  fi
else
  # in case no ref is given as parameter, attach the default SHA-1 to $SPLENV_BASE_NAME (lsst-scipipe)
  LSST_CONDA_ENV_NAME=${LSST_CONDA_ENV_NAME:-"${SPLENV_BASE_NAME}-${LSST_SPLENV_REF}"}
  echo "Setting the environment... ${LSST_CONDA_ENV_NAME}"
fi

conda activate "$LSST_CONDA_ENV_NAME"
export LSST_CONDA_ENV_NAME

# check if eups is not already available in the environment
# if not, make it available from a separate eups-base environment
if ! command -v eups > /dev/null; then
  echo "error: No eups found in the active environment ..."
  echo "  ... trying to use a stacked eups-base environment"
  conda deactivate
  if ! conda env list | grep "^eups-base " > /dev/null; then
    echo "::: Creating eups-base environment"
    conda create -y --name eups-base eups -c conda-forge
  fi
  conda activate eups-base
  conda activate --stack "$LSST_CONDA_ENV_NAME"
fi

# Define and check EUPS_PATH
export EUPS_PATH="${LSSTSW}/stack/${LSST_CONDA_ENV_NAME}"
export EUPS_ROOT="https://eups.lsst.cloud/stack"
export LSST_MINICONDA_VERSION=${LSST_MINICONDA_VERSION:-py38_4.9.2}
rubin_env_version=$(conda list --json rubin-env | jq -r '.[0].version') \
  && export EUPS_PATH="${LSSTSW}/stack/${SPLENV_BASE_NAME}-${rubin_env_version}"
if [ ! -d "$EUPS_PATH" ]; then
  mkdir -p "${EUPS_PATH}"/{site,ups_db}
  echo "::: Deploying manifest.remap"
  ln -sf "${LSSTSW}/etc/manifest.remap" "${EUPS_PATH}/site/manifest.remap"
  copy_postinstall_fix
fi
# This code is a copy from lsstinstall. We should look for a way to unify this code
platform="$(uname -s)"
cpu_arch="$(uname -m)"
echo "Platform: $platform-$cpu_arch"
if [[ "$platform" = "Linux" ]]; then
  if [[ "$cpu_arch" = "x86_64" ]]; then
    eups_platform="redhat/el7/conda-system/miniconda3-${LSST_MINICONDA_VERSION}-$rubin_env_version"
  elif [[ "$cpu_arch" = "aarch64" ]]; then
    eups_platform="redhat/el8-arm/conda-system/miniconda3-${LSST_MINICONDA_VERSION}-$rubin_env_version"
  fi

elif [[ "$platform" = "Darwin" ]]; then
  if [[ "$cpu_arch" = "x86_64" ]]; then
    eups_platform="osx/10.9/conda-system/miniconda3-${LSST_MINICONDA_VERSION}-$rubin_env_version"
  elif [[ "$cpu_arch" = "arm64" ]]; then
    eups_platform="osx/14-arm/conda-system/miniconda3-${LSST_MINICONDA_VERSION}-$rubin_env_version"
  fi
fi
if [[ -z $eups_platform ]]; then
  fail "Unable to identify OS or architecture"
fi
echo "$eups_platform"
export EUPS_DISTRIB="${EUPS_ROOT}/${eups_platform}"
echo "EUPS_PATH set to ${EUPS_PATH}"
export RUBIN_EUPS_PATH="${EUPS_PATH}"

setup -r "$LSSTSW/lsst_build"

echo "notice: lsstsw tools have been set up."

# vim: tabstop=2 shiftwidth=2 expandtab
